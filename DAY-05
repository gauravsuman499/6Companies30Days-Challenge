//#Q01:- Binary Search

Solution Code:-

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size() ;
        int s = 0, e = n-1 ;
        while( s<= e){
            int mid = s+(e-s)/2  ;

            if(nums[mid] == target)
                return mid  ;
            else if(nums[mid] > target)
                e =  mid - 1 ;
            else
                s =  mid + 1 ;
        }
        return -1  ;
    }
};

T->O(logN)
S->O(1)


//###Q-02:-Search Insert Position.

Solution Code:-
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int n = nums.size() ;
        int ans  = -1 ;
        int s = 0 , e  = n-1  ;
        while(s <= e){
            int mid = s+(e-s)/2 ;
            if(nums[mid] == target)
                return mid ;
            else if( nums[mid] < target ){
                s = mid+1  ;
            }
            else{
                e = mid-1 ;
            }
        }
        return s ;
    }
};

T->O(logN)
S->O(1) 


//###Q-03:-> Floor/Ceil in a sorted array.

Solution Code:- 
//for finding floor of a given Element.

class Solution{
  public:
    // Function to find floor of x
    // n: size of vector
    // x: element whose floor is to find
    int findFloor(vector<long long> v, long long n, long long x){
        
        // Your code here
        int ans  = -1 ;
        long long s = 0 , e = n-1 ;
        
        while( s<= e){
            long long mid = s+(e-s)/2  ;
            
            if( v[mid] == x)    return mid ;
            else if(v[mid] < x){
                ans = mid ;
                s = mid + 1 ;
            }
            else
                e = mid -1 ;
        }
        return ans ;
        
    }
};

//For finding ceil of a given element.

class Solution{
  public:
    // Function to find floor of x
    // n: size of vector
    // x: element whose floor is to find
    int findFloor(vector<long long> v, long long n, long long x){
        
        // Your code here
        int ans  = -1 ;
        long long s = 0 , e = n-1 ;
        
        while( s<= e){
            long long mid = s+(e-s)/2  ;
            
            if( v[mid] == x)    return mid ;
            else if(v[mid] < x){
                s = mid + 1 ;
            }
            else{
                ans = mid ;
                e = mid -1 ;
            }
        }
        return ans ;
        
    }
};


T->O(logN)
S->O(1)




