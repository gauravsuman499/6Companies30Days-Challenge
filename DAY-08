//###Q-01:- Find minimum element in a rotated sorted array.

Solution Code:-

class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = nums.size() ;
        int s  = 0 , e  = n-1  ;
        int minEle = INT_MAX ;
        
        while( s<= e){
            int mid =  s+(e-s)/2  ;
            
            if(nums[s] <=  nums[e]){
                minEle = min(minEle, nums[s]) ;
                break ;
            }
            if( nums[s] <= nums[mid] ){
                minEle = min(minEle , nums[s]) ;
                s = mid + 1  ;
            }
            else{
                minEle = min(minEle , nums[mid]) ;
                e = mid - 1 ;
            }
        }
        return minEle  ;
    }
};

T->O(logN)
S->O(1)



///###Q-02:- Find out how many times the array is rotated:-

int findKRotation(vector<int> &arr){
int s  = 0 ,  e = arr.size() -1 , mid , indx = -1  , minEle = INT_MAX  ;

while( s<= e){
mid = s+(e-s)/2  ;

if(arr[s] <=  arr[e]){
if(arr[s] < minEle){
minEle = arr[s] ;
indx =  s ;
}
break ;
}
if( arr[s] <= arr[mid]){
if(arr[s]  < minEle){
minEle = arr[s] ;
indx = s ;
}
    s = mid + 1 ;
}
else {
    if( arr[mid] < minEle){
minEle = arr[mid] ;
indx = mid  ;
}
e = mid - 1 ;
}
}
return indx ; 
}

T->O(logN)
S->O(1)








