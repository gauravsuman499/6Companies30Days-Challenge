//## Q-01:- find-first-and-last-position-of-element-in-sorted-array.

Solution Code:-
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        // vector<int> ans ;
        int n = nums.size() ;
        int s = 0, e = n- 1 ;
        int first = -1 , last = -1 ;

        //first index
        while( s <= e){
            int mid = s+(e-s)/2 ;

            if( nums[mid] == target){
                first = mid  ;
                e = mid -1 ;
            }
            else if(nums[mid] < target){
                s = mid +1  ;
            }
            else
                e = mid -1  ;
        }
        s = 0, e = n-1 ;
// last index
      while( s <= e){
            int m = s+(e-s)/2 ;

            if( nums[m] == target){
                last = m  ;
                s = m + 1 ;
            }
            else if(nums[m] < target){
                s = m +1  ;
            }
            else
                e = m -1  ;
        }

        return {first, last} ;
    }
};

T->O(log N)
S->O(1)


//##Q-02: Count occurrences of a number in a sorted array with duplicates.

Solution Code:-

int Solution::findCount(const vector<int> &A, int B) {
    int n = A.size() ;
    
    int s = 0 , e = n-1 ;
    int first = -1 , last = -1 ;
    //first
    while( s<= e){
        int mid = s+(e-s)/2  ;
        if( A[mid] == B){
            first = mid ;
           e = mid - 1 ; 
        }
        else if( A[mid] < B)
            s = mid + 1 ;
        else
            e = mid - 1 ;
    }
    // last
    s = 0, e = n-1  ;    
    while( s<= e){
        int mid = s+(e-s)/2  ;
        if( A[mid] == B){
            last = mid ;
            s = mid + 1 ; 
        }
        else if( A[mid] < B)
            s = mid + 1 ;
        else
            e = mid - 1 ;
    }
    
    if( first == -1)
        return 0 ;
    
    return (last - first +  1) ;
}

T->O(logN)
S->O(1)


