//##Q-01.Search in a rotated sorted array.

Solution Code:-

class Solution {
public:
    int search(vector<int>& nums, int target) {
        
        int n = nums.size() ;
        int s = 0 , e = n-1 ;

        while( s <= e){
            int mid = s + (e-s)/2 ;

            if( nums[mid] == target){
                return mid  ;
            }
            //left sorted
            else if( nums[s] <= nums[mid]){
                if( nums[s] <= target && target <= nums[mid])
                    e = mid - 1 ;
                else
                    s = mid + 1 ;
            }
            //right sorted
            else{
                if(nums[mid] <= target && target <= nums[e])
                    s = mid + 1 ;
                else
                    e = mid - 1 ;
            }
        }
        return -1 ;
    }
};

T->O(logN)
S->O(1)

//###Q-02. Search in a rotated sorted array II (contains duplicate elements as well).

Solution Code:- 

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int n = nums.size() ;
        int s = 0 , e = n-1  ;

        while( s<= e){
            int mid = s+(e-s)/2  ;

            if(nums[mid] == target) return true  ;

            if(nums[mid] == nums[s] && nums[mid] == nums[e]){
                e--;
                s++;
                continue ;
            }

            //left sorted
            else if( nums[s] <= nums[mid]){
                if( nums[s] <= target && target <= nums[mid])
                    e = mid -1  ;
                else
                    s = mid +1  ;
            }
            else{
                if( nums[mid] <= target && target <= nums[e])
                    s = mid +1 ;
                else
                    e = mid -1  ;
            }
        }
        return false ;
    }
};

T->O(logN)
S->O(1)



//###Q-03: Single element in a sorted array.

Solution Code:-

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size() ;
        int s = 1 , e = n-2  ;
        if( n== 1)  return nums[0] ;

        if( nums[0] != nums[1] )    return nums[0] ;
        if(nums[n-1] != nums[n-2])  return nums[n-1] ;

        while( s <= e){
            int mid = s+(e-s)/2  ;

            if( nums[mid] != nums[mid-1] && nums[mid] != nums[mid+1])
                return nums[mid] ;

            else if( ( nums[mid] == nums[mid-1] && mid % 2 == 0) || (nums[mid] == nums[mid+1] && mid %2 != 0)){
                e = mid -1 ;
            }
            else{
                s = mid + 1 ;
            }
        }
        return -1 ;
    }
};

T->O(logN)
S->O(1)
