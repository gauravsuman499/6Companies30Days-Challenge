// 1#-> TWO SUM

Solution Code:

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans ;
        int n = nums.size() ;
        unordered_map<int, int> umap ;
        for(int i = 0 ; i <n ; i++){
            int req = target - nums[i] ;
            if( umap.find(req) != umap.end() ){
                ans.push_back(i) ;
                ans.push_back(umap[req]) ;
                return ans  ;
            }
            else{
                umap[nums[i]]  = i ;
            }
        }
        return ans  ;
    }
};

T - O(N) , in worst case-> O(N2)
S - O(N)

// 2#-> Sort Colors(0's , 1's and 2's) :-

Solution Code->

class Solution {
public:
    void sortColors(vector<int>& nums) {
        // Using dutch national flag algorithm

        int n = nums.size() ;
        int s = 0 , m = 0 , e = n-1  ;

        while( m <= e){

            if( nums[m] == 0){
                swap(nums[m] , nums[s]) ;
                m++;
                s++;
            }
            else if( nums[m] == 1){
                m++;
            }
            else{
                swap(nums[m] , nums[e] );
                e-- ;
            }
        }
    }
};
